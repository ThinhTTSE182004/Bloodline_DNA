// <auto-generated />
using System;
using Login.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Login.Migrations
{
    [DbContext(typeof(BloodlineDnaContext))]
    partial class BloodlineDnaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Login.Models.ChooseMethod", b =>
                {
                    b.Property<int?>("CollectionMethodId")
                        .HasColumnType("int")
                        .HasColumnName("collection_method_id");

                    b.Property<int?>("ServicePackageId")
                        .HasColumnType("int")
                        .HasColumnName("service_package_id");

                    b.HasIndex("CollectionMethodId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Choose_method");
                });

            modelBuilder.Entity("Login.Models.CollectionMethod", b =>
                {
                    b.Property<int>("CollectionMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("collection_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionMethodId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("method_name");

                    b.HasKey("CollectionMethodId")
                        .HasName("PK__Collecti__1B185E47B96E21CE");

                    b.HasIndex(new[] { "MethodName" }, "UQ__Collecti__2DA2FAEEBDD685A8")
                        .IsUnique();

                    b.ToTable("Collection_method");
                });

            modelBuilder.Entity("Login.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("delivery_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("delivery_address");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("delivery_status");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.HasKey("DeliveryId")
                        .HasName("PK__Delivery__1C5CF4F584C05B01");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Delivery__46596228E2A38323")
                        .IsUnique();

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("Login.Models.DeliveryTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("CompleteAt")
                        .HasColumnType("date")
                        .HasColumnName("complete_at");

                    b.Property<string>("DeliveryTaskStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("delivery_task_status");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.HasKey("TaskId")
                        .HasName("PK__Delivery__0492148D46A0B8FD");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("StaffId");

                    b.ToTable("Delivery_task");
                });

            modelBuilder.Entity("Login.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__7A6B2B8C0E7D03BC");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Feedback__465962288B5DC2EA")
                        .IsUnique();

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Login.Models.FeedbackResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("response_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<string>("ContentResponse")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content_response");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ResponseId")
                        .HasName("PK__Feedback__EBECD896729DDB04");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("StaffId");

                    b.ToTable("Feedback_response");
                });

            modelBuilder.Entity("Login.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CollectionMethodId")
                        .HasColumnType("int")
                        .HasColumnName("collection_method_id");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_status");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__4659622970B040CD");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "CollectionMethodId" }, "UQ__Orders__1B185E46F0C25976")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Login.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int")
                        .HasColumnName("medical_staff_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int")
                        .HasColumnName("service_package_id");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__Order_de__3C5A4080DFAAB342");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Order_detail");
                });

            modelBuilder.Entity("Login.Models.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("decimal(12, 0)")
                        .HasColumnName("phone");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("relationship");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("sex");

                    b.HasKey("ParticipantId")
                        .HasName("PK__Particip__4E037806DF082528");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Login.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("total");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__ED1FC9EAF2FC902D");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Payment__46596228D091F1C1")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Login.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__E5331AFA883316B6");

                    b.HasIndex(new[] { "PermissionName" }, "UQ__Permissi__81C0F5A2AF37A695")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Login.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<string>("RawDataPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("raw_data_path");

                    b.Property<DateTime?>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("report_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("report_url");

                    b.Property<string>("ResultStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("result_status");

                    b.Property<string>("TestSummary")
                        .HasColumnType("text")
                        .HasColumnName("test_summary");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ResultId")
                        .HasName("PK__Result__AFB3C316A7FD1A4C");

                    b.HasIndex(new[] { "OrderDetailId" }, "UQ__Result__3C5A4081DA9B3E92")
                        .IsUnique();

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Login.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__760965CCF7573CC2");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__783254B1590D0F6A")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Login.Models.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sample_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleId"));

                    b.Property<DateOnly?>("CollectedDate")
                        .HasColumnType("date")
                        .HasColumnName("collected_date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("participant_id");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<string>("SampleStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sample_status");

                    b.Property<int>("SampleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("sample_type_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.HasKey("SampleId")
                        .HasName("PK__samples__84ACF7BAFBEADC56");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SampleTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("samples");
                });

            modelBuilder.Entity("Login.Models.SampleKit", b =>
                {
                    b.Property<int>("SampleKitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sample_kit_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleKitId"));

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IntructionUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("intruction_url");

                    b.Property<string>("KitCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("kit_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<DateOnly?>("SendDate")
                        .HasColumnType("date")
                        .HasColumnName("send_date");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SampleKitId")
                        .HasName("PK__Sample_k__0BEC49D5E56EEC1C");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("StaffId");

                    b.HasIndex(new[] { "KitCode" }, "UQ__Sample_k__24769816AA225B49")
                        .IsUnique();

                    b.ToTable("Sample_kit");
                });

            modelBuilder.Entity("Login.Models.SampleTransfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transfer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int")
                        .HasColumnName("medical_staff_id");

                    b.Property<string>("SampleTransferStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sample_transfer_status");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("TransferDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("transfer_date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransferId")
                        .HasName("PK__Sample_t__78E6FD338DCEF5FB");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("Sample_transfer");
                });

            modelBuilder.Entity("Login.Models.SampleType", b =>
                {
                    b.Property<int>("SampleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sample_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("SampleTypeId")
                        .HasName("PK__Sample_t__52C64896B93A529D");

                    b.HasIndex(new[] { "Name" }, "UQ__Sample_t__72E12F1B25024A15")
                        .IsUnique();

                    b.ToTable("Sample_type");
                });

            modelBuilder.Entity("Login.Models.ServicePackage", b =>
                {
                    b.Property<int>("ServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePackageId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.HasKey("ServicePackageId")
                        .HasName("PK__Service___968593276BBEA96B");

                    b.HasIndex(new[] { "ServiceName" }, "UQ__Service___4A8EDF39854693FF")
                        .IsUnique();

                    b.ToTable("Service_package");
                });

            modelBuilder.Entity("Login.Models.ServicePrice", b =>
                {
                    b.Property<int>("ServicePriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_price_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePriceId"));

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int")
                        .HasColumnName("service_package_id");

                    b.HasKey("ServicePriceId")
                        .HasName("PK__Service___B715FBB704FCF3E8");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Service_price");
                });

            modelBuilder.Entity("Login.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId")
                        .HasName("PK__USERS__B9BE370FE5534A4D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__USERS__AB6E61645513B201")
                        .IsUnique();

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Login.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId")
                        .HasName("PK__User_pro__AEBB701F1DE90570");

                    b.HasIndex(new[] { "Email" }, "UQ__User_pro__AB6E61644B4B6EFE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UQ__User_pro__B9BE370E70888B0C")
                        .IsUnique();

                    b.ToTable("User_profile");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK__Role_Per__C85A54635B7C1482");

                    b.HasIndex("PermissionId");

                    b.ToTable("Role_Permission", (string)null);
                });

            modelBuilder.Entity("Login.Models.ChooseMethod", b =>
                {
                    b.HasOne("Login.Models.CollectionMethod", "CollectionMethod")
                        .WithMany()
                        .HasForeignKey("CollectionMethodId")
                        .HasConstraintName("FK__Choose_me__colle__59FA5E80");

                    b.HasOne("Login.Models.ServicePackage", "ServicePackage")
                        .WithMany()
                        .HasForeignKey("ServicePackageId")
                        .HasConstraintName("FK__Choose_me__servi__59063A47");

                    b.Navigation("CollectionMethod");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("Login.Models.Delivery", b =>
                {
                    b.HasOne("Login.Models.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("Login.Models.Delivery", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Delivery__order___6C190EBB");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Login.Models.DeliveryTask", b =>
                {
                    b.HasOne("Login.Models.User", "Manager")
                        .WithMany("DeliveryTaskManagers")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK__Delivery___manag__151B244E");

                    b.HasOne("Login.Models.OrderDetail", "OrderDetail")
                        .WithMany("DeliveryTasks")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__Delivery___order__14270015");

                    b.HasOne("Login.Models.User", "Staff")
                        .WithMany("DeliveryTaskStaffs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Delivery___staff__160F4887");

                    b.Navigation("Manager");

                    b.Navigation("OrderDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Login.Models.Feedback", b =>
                {
                    b.HasOne("Login.Models.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("Login.Models.Feedback", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__order___03F0984C");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Login.Models.FeedbackResponse", b =>
                {
                    b.HasOne("Login.Models.Feedback", "Feedback")
                        .WithMany("FeedbackResponses")
                        .HasForeignKey("FeedbackId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback___feedb__08B54D69");

                    b.HasOne("Login.Models.User", "Staff")
                        .WithMany("FeedbackResponses")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback___staff__09A971A2");

                    b.Navigation("Feedback");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Login.Models.Order", b =>
                {
                    b.HasOne("Login.Models.CollectionMethod", "CollectionMethod")
                        .WithOne("Order")
                        .HasForeignKey("Login.Models.Order", "CollectionMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__collecti__6383C8BA");

                    b.HasOne("Login.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__customer__628FA481");

                    b.Navigation("CollectionMethod");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Login.Models.OrderDetail", b =>
                {
                    b.HasOne("Login.Models.User", "MedicalStaff")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MedicalStaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_det__medic__68487DD7");

                    b.HasOne("Login.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_det__order__6754599E");

                    b.HasOne("Login.Models.ServicePackage", "ServicePackage")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_det__servi__66603565");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Order");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("Login.Models.Payment", b =>
                {
                    b.HasOne("Login.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Login.Models.Payment", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__order_i__76969D2E");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Login.Models.Result", b =>
                {
                    b.HasOne("Login.Models.OrderDetail", "OrderDetail")
                        .WithOne("Result")
                        .HasForeignKey("Login.Models.Result", "OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__Result__order_de__10566F31");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Login.Models.Sample", b =>
                {
                    b.HasOne("Login.Models.OrderDetail", "OrderDetail")
                        .WithMany("Samples")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__samples__order_d__71D1E811");

                    b.HasOne("Login.Models.Participant", "Participant")
                        .WithMany("Samples")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK__samples__partici__6EF57B66");

                    b.HasOne("Login.Models.SampleType", "SampleType")
                        .WithMany("Samples")
                        .HasForeignKey("SampleTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__samples__sample___6FE99F9F");

                    b.HasOne("Login.Models.User", "Staff")
                        .WithMany("Samples")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__samples__staff_i__70DDC3D8");

                    b.Navigation("OrderDetail");

                    b.Navigation("Participant");

                    b.Navigation("SampleType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Login.Models.SampleKit", b =>
                {
                    b.HasOne("Login.Models.OrderDetail", "OrderDetail")
                        .WithMany("SampleKits")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample_ki__order__7C4F7684");

                    b.HasOne("Login.Models.User", "Staff")
                        .WithMany("SampleKits")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample_ki__staff__7D439ABD");

                    b.Navigation("OrderDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Login.Models.SampleTransfer", b =>
                {
                    b.HasOne("Login.Models.User", "MedicalStaff")
                        .WithMany("SampleTransferMedicalStaffs")
                        .HasForeignKey("MedicalStaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample_tr__medic__1AD3FDA4");

                    b.HasOne("Login.Models.User", "Staff")
                        .WithMany("SampleTransferStaffs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample_tr__staff__19DFD96B");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Login.Models.ServicePrice", b =>
                {
                    b.HasOne("Login.Models.ServicePackage", "ServicePackage")
                        .WithMany("ServicePrices")
                        .HasForeignKey("ServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Service_p__servi__5CD6CB2B");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("Login.Models.User", b =>
                {
                    b.HasOne("Login.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__USERS__role_id__403A8C7D");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Login.Models.UserProfile", b =>
                {
                    b.HasOne("Login.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Login.Models.UserProfile", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_prof__user___46E78A0C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("Login.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK__Role_Perm__permi__4AB81AF0");

                    b.HasOne("Login.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Role_Perm__role___49C3F6B7");
                });

            modelBuilder.Entity("Login.Models.CollectionMethod", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Login.Models.Feedback", b =>
                {
                    b.Navigation("FeedbackResponses");
                });

            modelBuilder.Entity("Login.Models.Order", b =>
                {
                    b.Navigation("Delivery");

                    b.Navigation("Feedback");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Login.Models.OrderDetail", b =>
                {
                    b.Navigation("DeliveryTasks");

                    b.Navigation("Result");

                    b.Navigation("SampleKits");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Login.Models.Participant", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Login.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Login.Models.SampleType", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Login.Models.ServicePackage", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ServicePrices");
                });

            modelBuilder.Entity("Login.Models.User", b =>
                {
                    b.Navigation("DeliveryTaskManagers");

                    b.Navigation("DeliveryTaskStaffs");

                    b.Navigation("FeedbackResponses");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");

                    b.Navigation("SampleKits");

                    b.Navigation("SampleTransferMedicalStaffs");

                    b.Navigation("SampleTransferStaffs");

                    b.Navigation("Samples");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
